name: Deploy on Kubernetes Cluster
on:
    workflow_call:

        inputs:
            ref_name:
                required: true
                type: string
                description: tag or branch name
            namespace:
                required: true
                type: string
                description: e.g. ubique, swisstopo, schweizmobil
            app_name:
                required: true
                type: string
                description: e.g. ub-pushserver, swisstopo-ws, schweizmobil-ws
            app_directory:
                required: true
                type: string
                description: e.g. ub-pushservive/ub-pushserver, swisstopo-backend/swisstopo-ws, schweizmobil-backend/schweizmobil-ws
            target:
                required: true
                type: string
                description: dev|prod
            image_name_postfix:
                required: false
                default: ''
                type: string
                description: optional suffix to the docker image name to be used
            with_configmap:
                required: false
                default: true
                type: boolean
                description: set to false to disable creating a configmap
            cluster:
                default: 'ub-kub-dev'
                type: string
                required: false
                description: 'name of the cluster (default: ub-kub-dev)'
            cluster-resource-group:
                default: 'ub-schweiz-cluster'
                type: string
                required: false
                description: 'resource group of the cluster (default: ub-schweiz-cluster)'
            pull_secret_name:
                default: 'ub-acr-secret'
                type: string
                required: false
                description: 'image pull secret to use (default: ub-acr-secret)'

        secrets:
            acr_registry:
                required: true
            acr_username:
                required: true
            acr_password:
                required: true
            az_service_principal:
                required: true

jobs:
    deploy:
        runs-on: ubuntu-latest
        steps:
            -   uses: actions/checkout@v2
                with:
                    ref: ${{ inputs.ref_name }}

            -   name: Set AKS context
                uses: azure/aks-set-context@v1
                with:
                    creds: '${{ secrets.az_service_principal }}'
                    cluster-name: ${{ inputs.cluster }}
                    resource-group: ${{ inputs.cluster-resource-group }}

            -   name: Create namespace (if it doesn't exist)
                run: |
                    kubectl create namespace ${{ inputs.namespace }} --dry-run=client -o json | kubectl apply -f -

            -   name: Create configmap
                if: ${{ inputs.with_configmap }}
                run: |
                    kubectl create configmap --namespace ${{ inputs.namespace }} ${{ inputs.app_name }}-${{ inputs.target }}-config --from-file ${{ inputs.app_directory }}/conf/${{ inputs.target }} --dry-run=client -o json | kubectl apply -f -

            -   name: Create image pull secret for ACR
                uses: azure/k8s-create-secret@v1
                with:
                    container-registry-url: ${{ secrets.acr_registry }}
                    container-registry-username: ${{ secrets.acr_username }}
                    container-registry-password: ${{ secrets.acr_password }}
                    secret-name: ${{ inputs.pull_secret_name }}
                    namespace: ${{ inputs.namespace }}

            -   name: Check deployment.yaml existence
                id: check_deployment_file
                uses: andstor/file-existence-action@v1
                with:
                    files: "${{ inputs.app_directory }}/manifests/${{ inputs.target }}/deployment.yaml"
                    
            -   name: Apply Deployment config
                uses: azure/k8s-deploy@v1
                if: steps.check_deployment_file.outputs.files_exists == 'true'
                with:
                    manifests: |
                        ${{ inputs.app_directory }}/manifests/${{ inputs.target }}/deployment.yaml
                    images: |
                        ${{ secrets.acr_registry }}/${{ inputs.app_name }}${{ inputs.image_name_postfix }}:${{ inputs.ref_name }}
                    imagepullsecrets: |
                        ${{ inputs.pull_secret_name }}
                    namespace: ${{ inputs.namespace }}
                    
            
            -   name: Check service.yaml existence
                id: check_service_file
                uses: andstor/file-existence-action@v1
                with:
                    files: "${{ inputs.app_directory }}/manifests/${{ inputs.target }}/service.yaml"        
            
            -   name: Apply Service config
                uses: azure/k8s-deploy@v1
                if: steps.check_service_file.outputs.files_exists == 'true'
                with:
                    manifests: |
                        ${{ inputs.app_directory }}/manifests/${{ inputs.target }}/service.yaml
                    imagepullsecrets: |
                        ${{ inputs.pull_secret_name }}
                    namespace: ${{ inputs.namespace }}  
                                           
            -   name: Check ingress.yaml existence
                id: check_ingress_file
                uses: andstor/file-existence-action@v1
                with:
                    files: "${{ inputs.app_directory }}/manifests/${{ inputs.target }}/ingress.yaml"    

            -   name: Apply Ingress config
                uses: azure/k8s-deploy@v1
                if: steps.check_ingress_file.outputs.files_exists == 'true'
                with:
                    manifests: |
                        ${{ inputs.app_directory }}/manifests/${{ inputs.target }}/ingress.yaml
                    imagepullsecrets: |
                        ${{ inputs.pull_secret_name }}
                    namespace: ingress-basic
