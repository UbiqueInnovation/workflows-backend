name: Build with maven and Push to Docker Registry
on:
    workflow_call:

        inputs:
            ref_name:
                required: true
                type: string
                description: tag or branch name
            app_name:
                required: true
                type: string
            app_directory:
                required: true
                type: string
            mvn_root_directory:
                required: false
                type: string
            java_version:
                default: '17'
                type: string
                required: false
            jib_container_volumes:
                default: '/config/'
                type: string
                required: false
                description: comma-separated container volumes for jib-maven-plugin (default /config/)
            jib_custom_docker_image:
                type: string
                required: false
                description: custom docker image for docker build.
            tag_add_commithash:
                required: false
                default: false
                type: boolean
                description: Add the current commit hash to the branch (necessary when deploying from a branch)
            use_mvn_central:
                default: false
                type: boolean
                required: false
                description: If false, use artifactory_* input secrets
            run_poeditor:
                required: false
                default: false
                type: boolean
            native_image:
                required: false
                default: false
                type: boolean
            target_env:
                required: false
                default: local
                type: string
                description: Currently only used for native builds
            runs_on:
                required: false
                default: ubuntu-latest
                type: string
                description: Set to 'self-hosted' if needed.

        secrets:
            artifactory_user:
                required: false
            artifactory_password:
                required: false
            artifactory_url:
                required: false
            artifactory_repo:
                required: false
            acr_registry:
                required: true
            acr_username:
                required: true
            acr_password:
                required: true
            poeditor_api_key:
                required: false
                description: necessary if input.run_poeditor is true
            poeditor_project_id:
                required: false
                description: necessary if input.run_poeditor is true
            jib_custom_docker_image_repo:
                required: false
                description: custom docker image repo for docker build.
            jib_custom_docker_image_repo_user:
                required: false
                description: custom docker image repo user for for docker build.
            jib_custom_docker_image_repo_password:
                required: false
                description: custom docker image repo password for for docker build.
            self_hosted_cache_endpoint:
                required: false
                description: required if runs_on == 'self-hosted'
            self_hosted_cache_port:
                required: false
                description: required if runs_on == 'self-hosted'
            self_hosted_cache_access_key:
                required: false
                description: required if runs_on == 'self-hosted'
            self_hosted_cache_secret_key:
                required: false
                description: required if runs_on == 'self-hosted'
            self_hosted_cache_bucket:
                required: false
                description: required if runs_on == 'self-hosted'
            self_hosted_cache_region:
                required: false
                description: required if runs_on == 'self-hosted'

jobs:
    create-docker-image:
        name: Create Docker Image
        runs-on: ${{ inputs.runs_on }}
        steps:
            -   name: Checkout code
                uses: actions/checkout@v3
                with:
                    ref: ${{ inputs.ref_name }}

            -   name: Set up Docker Buildx for self-hosted
                if: ${{ inputs.runs_on == 'self-hosted'}}
                uses: docker/setup-buildx-action@v2
                with:
                    endpoint: unix://var/run/docker/docker.sock

            -   name: Set up Docker Buildx
                if: ${{ inputs.runs_on != 'self-hosted'}}
                uses: docker/setup-buildx-action@v2

            -   name: Git Status
                run: git status

            -   name: Set up JDK
                if: ${{ ! inputs.native_image }}
                uses: actions/setup-java@v3
                with:
                    java-version: ${{ inputs.java_version }}
                    distribution: 'temurin'

            -   name: Set up GraalVM JDK
                if: ${{ inputs.native_image }}
                uses: graalvm/setup-graalvm@v1
                with:
                    java-version: ${{ inputs.java_version }}
                    distribution: 'graalvm'

            -   name: Cache Maven packages on self-hosted MinIO
                if: ${{ inputs.runs_on == 'self-hosted'}}
                uses: tespkg/actions-cache@12721c08d65e046d6006e5729ba76bff421ac0ef
                with:
                    endpoint: ${{ secrets.self_hosted_cache_endpoint }}
                    port: ${{ secrets.self_hosted_cache_port }}
                    insecure: true
                    accessKey: ${{ secrets.self_hosted_cache_access_key }}
                    secretKey: ${{ secrets.self_hosted_cache_secret_key }}
                    bucket: ${{ secrets.self_hosted_cache_bucket }}
                    region: ${{ secrets.self_hosted_cache_region }}
                    use-fallback: true
                    path: ~/.m2/repository
                    key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
                    restore-keys: ${{ runner.os }}-m2-

            -   name: Cache Maven packages
                if: ${{ inputs.runs_on != 'self-hosted'}}
                uses: actions/cache@v3
                with:
                    path: ~/.m2/repository
                    key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
                    restore-keys: ${{ runner.os }}-m2-

            -   uses: actions/setup-python@v4
                if: ${{ inputs.run_poeditor }}
                with:
                    python-version: '3.x'
                    cache: 'pip'

            -   name: Check requirements.txt existence
                if: ${{ inputs.run_poeditor }}
                id: check_requirements_txt
                uses: andstor/file-existence-action@20b4d2e596410855db8f9ca21e96fbe18e12930b
                with:
                    files: "requirements.txt"

            -   name: Install required python module using pip
                if: ${{ steps.check_requirements_txt.outputs.files_exists == 'true' }}
                run: |
                    python -m pip install -r requirements.txt

            -   name: Run getTranslations.py
                if: ${{ inputs.run_poeditor }}
                run: |
                    python ${{ inputs.app_directory }}/getTranslations.py ${{ secrets.poeditor_api_key }} ${{ secrets.poeditor_project_id }}

            -   name: Create maven central settings.xml
                if: ${{ inputs.use_mvn_central }}
                uses: whelk-io/maven-settings-xml-action@7c60eb95b2d5ec18f2e0e29f34c9ed69475e7a96

            -   name: Create custom artifactory settings.xml
                if: ${{ ! inputs.use_mvn_central }}
                uses: whelk-io/maven-settings-xml-action@7c60eb95b2d5ec18f2e0e29f34c9ed69475e7a96
                with:
                    servers: '[{"id": "ubique-artifactory", "username": "${{ secrets.artifactory_user}}", "password": "${{ secrets.artifactory_password }}"}]'
                    repositories: '[{"id" : "ubique-artifactory", "url" : "${{ secrets.artifactory_url }}${{ secrets.artifactory_repo }}"}]'

            -   name: Get TAG_NAME from ref_name
                run: echo "TAG_NAME=${{ inputs.ref_name }}" >> $GITHUB_ENV

            -   name: Replace `/` by `-` in TAG_NAME
                run: echo "TAG_NAME=${TAG_NAME/\//-}" >> $GITHUB_ENV

            -   name: Append commit hash (first 8 characters) to TAG_NAME
                if: ${{ inputs.tag_add_commithash }}
                run: echo "TAG_NAME=TAG_NAME-${GITHUB_SHA::8}" >> $GITHUB_ENV

            -   name: Set default maven root directory if empty
                if: ${{ ! inputs.mvn_root_directory  }}
                run: echo "MVN_ROOT_DIR=${{ inputs.app_directory }}/.." >> $GITHUB_ENV

            -   name: Set maven root directory from input
                if: ${{ inputs.mvn_root_directory  }}
                run: echo "MVN_ROOT_DIR=${{ inputs.mvn_root_directory }}" >> $GITHUB_ENV

            -   name: Set VERSION from TAG_NAME
                run: echo "VERSION=${TAG_NAME}" >> $GITHUB_ENV

            -   name: Strip leading `v` from VERSION
                run: echo "VERSION=${VERSION##v}" >> $GITHUB_ENV

            -   name: Set versions
                run: mvn -f ${{ env.MVN_ROOT_DIR }}/pom.xml versions:set -DnewVersion=$VERSION

            -   name: Commit versions
                run: mvn -f ${{ env.MVN_ROOT_DIR }}/pom.xml versions:commit

            -   name: Build with Maven
                run: mvn --batch-mode --update-snapshots install -DskipTests -f ${{ env.MVN_ROOT_DIR }}/pom.xml

            -   name: Set default docker image
                if: ${{ ! inputs.jib_custom_docker_image }}
                run: |
                    echo "DOCKER_IMAGE=eclipse-temurin:${{ inputs.java_version }}" >> $GITHUB_ENV

            -   name: jib_custom_docker_image_repo to env variable for use in if check
                run: |
                    echo "SECRET_JIB_CUSTOM_DOCKER_IMAGE_REPO=${{ secrets.jib_custom_docker_image_repo }}" >> $GITHUB_ENV

            -   name: Set custom docker image from official docker repo
                if: ${{ inputs.jib_custom_docker_image && ! env.SECRET_JIB_CUSTOM_DOCKER_IMAGE_REPO }}
                run: |
                    echo "DOCKER_IMAGE=${{ inputs.jib_custom_docker_image }}" >> $GITHUB_ENV

            -   name: Set custom docker image from custom repo
                if: ${{ inputs.jib_custom_docker_image && env.SECRET_JIB_CUSTOM_DOCKER_IMAGE_REPO }}
                run: |
                    echo "DOCKER_IMAGE=${{ secrets.jib_custom_docker_image_repo }}/${{ inputs.jib_custom_docker_image }}" >> $GITHUB_ENV

            -   name: Docker image for build
                run: |
                    echo "Docker image jor build: $DOCKER_IMAGE"

            -   name: Build and push docker image
                if: ${{ ! inputs.native_image }}
                run: |
                    mvn --batch-mode compile jib:build \
                    -f ${{ inputs.app_directory }}/pom.xml \
                    -Dconfig.directory=/config \
                    -Dimage=${{ secrets.acr_registry }}/${{ inputs.app_name }}:${{ env.TAG_NAME }} \
                    -Djib.from.image=${{ env.DOCKER_IMAGE }} \
                    -Djib.from.auth.username=${{ secrets.jib_custom_docker_image_repo_user }} \
                    -Djib.from.auth.password=${{ secrets.jib_custom_docker_image_repo_password }} \
                    -Djib.to.auth.username=${{ secrets.acr_username }} \
                    -Djib.to.auth.password=${{ secrets.acr_password }} \
                    -Djib.container.volumes=${{ inputs.jib_container_volumes }} \
                    -Djib.container.environment=VERSION_TAG_NAME="${{ env.TAG_NAME }}",SPRING_CONFIG_LOCATION="/config/" \
                    -Djib.container.entrypoint='sh,-c,java -XX:MinRAMPercentage=60.0 -XX:MaxRAMPercentage=80.0 $ADDITIONAL_JAVA_OPTS -cp @/app/jib-classpath-file @/app/jib-main-class-file $@'

            -   name: Build and push native docker image
                if: ${{ inputs.native_image }}
                run: |
                    mvn --batch-mode package jib:build -Pnative \
                    -f ${{ inputs.app_directory }}/pom.xml \
                    -Dconfig.deploy.env=${{ inputs.target_env }} -Dconfig.directory=/config \
                    -Dimage=${{ secrets.acr_registry }}/${{ inputs.app_name }}:${{ env.TAG_NAME }}-${{ inputs.target_env }} \
                    -Djib.from.image=${{ env.DOCKER_IMAGE }} \
                    -Djib.from.auth.username=${{ secrets.jib_custom_docker_image_repo_user }} \
                    -Djib.from.auth.password=${{ secrets.jib_custom_docker_image_repo_password }} \
                    -Djib.to.auth.username=${{ secrets.acr_username }} \
                    -Djib.to.auth.password=${{ secrets.acr_password }} \
                    -Djib.container.volumes=${{ inputs.jib_container_volumes }} \
                    -Djib.container.environment=VERSION_TAG_NAME="${{ env.TAG_NAME }}",SPRING_CONFIG_LOCATION="/config/" \
                    -Djib.container.entrypoint='sh,-c,java -XX:MinRAMPercentage=60.0 -XX:MaxRAMPercentage=80.0 $ADDITIONAL_JAVA_OPTS -cp @/app/jib-classpath-file @/app/jib-main-class-file $@'

