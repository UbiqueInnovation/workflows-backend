name: Build with maven and Push to Docker Registry
on:
    workflow_call:

        inputs:
            ref_name:
                required: true
                type: string
                description: tag or branch name
            app_name:
                required: true
                type: string
            app_directory:
                required: true
                type: string
            mvn_root_directory:
                required: false
                type: string
            java_version:
                default: '17'
                type: string
                required: false
            jib_container_volumes:
                default: '/config/'
                type: string
                required: false
                description: comma-separated container volumes for jib-maven-plugin (default /config/)
            jib_custom_docker_image:
                type: string
                required: false
                description: custom docker image for jib build.              
            tag_add_commithash:
                required: false
                default: false
                type: boolean
                description: Add the current commit hash to the branch (necessary when deploying from a branch)
            use_mvn_central:
                default: false
                type: boolean
                required: false
                description: If false, use artifactory_* input secrets
            run_poeditor:
                required: false
                default: false
                type: boolean

        secrets:
            artifactory_user:
                required: false
            artifactory_password:
                required: false
            artifactory_url:
                required: false
            artifactory_repo:
                required: false
            acr_registry:
                required: true
            acr_username:
                required: true
            acr_password:
                required: true
            poeditor_api_key:
                required: false
                description: necessary if input.run_poeditor is true
            poeditor_project_id:
                required: false
                description: necessary if input.run_poeditor is true
            jib_custom_docker_image_repo:
                required: false
                description: custom docker image repo jib build.                     
            jib_custom_docker_image_repo_user:
                required: false
                description: custom docker image repo user for jib build.
            jib_custom_docker_image_repo_password:
                required: false
                description: custom docker image repo password for jib build.                

jobs:
    create-docker-image:
        runs-on: ubuntu-latest
        steps:
            -   name: Checkout code
                uses: actions/checkout@v2
                with:
                    ref: ${{ inputs.ref_name }}

            -   name: Git Status
                run: git status

            -   name: Set up JDK
                uses: actions/setup-java@v2
                with:
                    java-version: ${{ inputs.java_version }}
                    distribution: 'temurin'

            -   name: Cache Maven packages
                uses: actions/cache@v2
                with:
                    path: ~/.m2/repository
                    key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
                    restore-keys: ${{ runner.os }}-m2

            -   uses: actions/setup-python@v2
                if: ${{ inputs.run_poeditor }}
                with:
                    python-version: '3.x'
                    cache: 'pip'

            -   name: Check requirements.txt existence
                if: ${{ inputs.run_poeditor }}
                id: check_requirements_txt
                uses: andstor/file-existence-action@87d74d4732ddb824259d80c8a508c0124bf1c673
                with:
                    files: "requirements.txt"

            -   name: Install required python module using pip
                if: ${{ steps.check_requirements_txt.outputs.files_exists == 'true' }}
                run: |
                    python -m pip install -r requirements.txt

            -   name: Run getTranslations.py
                if: ${{ inputs.run_poeditor }}
                run: |
                    python ${{ inputs.app_directory }}/getTranslations.py ${{ secrets.poeditor_api_key }} ${{ secrets.poeditor_project_id }}

            -   name: Create maven central settings.xml
                if: ${{ inputs.use_mvn_central }}
                uses: whelk-io/maven-settings-xml-action@8a613be18185c8521e1501081adad5041840f2c8

            -   name: Create custom artifactory settings.xml
                if: ${{ ! inputs.use_mvn_central }}
                uses: whelk-io/maven-settings-xml-action@8a613be18185c8521e1501081adad5041840f2c8
                with:
                    servers: '[{"id": "ubique-artifactory", "username": "${{ secrets.artifactory_user}}", "password": "${{ secrets.artifactory_password }}"}]'
                    repositories: '[{"id" : "ubique-artifactory", "url" : "${{ secrets.artifactory_url }}${{ secrets.artifactory_repo }}"}]'

            -   name: Set TAG_NAME with commit hash
                if: ${{ inputs.tag_add_commithash }}
                run: echo "TAG_NAME=${{ inputs.ref_name }}-${GITHUB_SHA::8}" >> $GITHUB_ENV

            -   name: Set TAG_NAME
                if: ${{ ! inputs.tag_add_commithash }}
                run: echo "TAG_NAME=${{ inputs.ref_name }}" >> $GITHUB_ENV

            -   name: Get version from TAG_NAME with commit hash
                if: ${{ inputs.tag_add_commithash }}
                run: echo "VERSION=${TAG_NAME}" >> $GITHUB_ENV

            -   name: Get version from tag
                if: ${{ ! inputs.tag_add_commithash }}
                env:
                    REF_NAME: ${{ inputs.ref_name }}
                run: echo "VERSION=${REF_NAME/[v\/]/}" >> $GITHUB_ENV

            -   name: Set default maven root directory if empty
                if: "${{ ! inputs.mvn_root_directory  }}"
                run: echo "MVN_ROOT_DIR=${{ inputs.app_directory }}/.." >> $GITHUB_ENV   

            -   name: Set maven root directory from input
                if: "${{ inputs.mvn_root_directory  }}"
                run: echo "MVN_ROOT_DIR=${{ inputs.mvn_root_directory }}" >> $GITHUB_ENV   

            -   name: Set versions
                run: mvn -f ${{ env.MVN_ROOT_DIR }}/pom.xml versions:set -DnewVersion=$VERSION

            -   name: Commit versions
                run: mvn -f ${{ env.MVN_ROOT_DIR }}/pom.xml versions:commit

            -   name: Build with Maven
                run: mvn --batch-mode --update-snapshots install -DskipTests -f ${{ env.MVN_ROOT_DIR }}/pom.xml

            -   name: Set default docker image
                if: "${{ ! inputs.jib_custom_docker_image }}"
                run: |
                    echo "DOCKER_IMAGE=eclipse-temurin:${{ inputs.java_version }}-focal" >> $GITHUB_ENV

            -   name: jib_custom_docker_image_repo to env variable for use in if check
                run: |
                    echo "SECRET_JIB_CUSTOM_DOCKER_IMAGE_REPO=${{ secrets.jib_custom_docker_image_repo }}" >> $GITHUB_ENV

            -   name: Set custom docker image from official docker repo
                if: "${{ inputs.jib_custom_docker_image && ! env.SECRET_JIB_CUSTOM_DOCKER_IMAGE_REPO }}"
                run: |
                    echo "DOCKER_IMAGE=${{ inputs.jib_custom_docker_image }}" >> $GITHUB_ENV

            -   name: Set custom docker image from custom repo
                if: "${{ inputs.jib_custom_docker_image && env.SECRET_JIB_CUSTOM_DOCKER_IMAGE_REPO }}"
                run: |
                    echo "DOCKER_IMAGE=${{ secrets.jib_custom_docker_image_repo }}/${{ inputs.jib_custom_docker_image }}" >> $GITHUB_ENV

            -   name: Docker image for JIB build
                run: |
                    echo "Docker image jor JIB build: $DOCKER_IMAGE"

            -   name: Build and push docker
                run: |
                    mvn --batch-mode compile com.google.cloud.tools:jib-maven-plugin:3.2.1:build \
                    -f ${{ inputs.app_directory }}/pom.xml \
                    -Dimage=${{ secrets.acr_registry }}/${{ inputs.app_name }}:${{ env.TAG_NAME }} \
                    -Djib.from.image=${{ env.DOCKER_IMAGE }} \
                    -Djib.from.auth.username=${{ secrets.jib_custom_docker_image_repo_user }} \
                    -Djib.from.auth.password=${{ secrets.jib_custom_docker_image_repo_password }} \
                    -Djib.to.auth.username=${{ secrets.acr_username }} \
                    -Djib.to.auth.password=${{ secrets.acr_password }} \
                    -Djib.container.volumes=${{ inputs.jib_container_volumes }} \
                    -Djib.container.environment=VERSION_TAG_NAME="${{ env.TAG_NAME }}",SPRING_CONFIG_LOCATION="/config/" \
                    -Djib.container.jvmFlags=-XX:MinRAMPercentage=60.0,-XX:MaxRAMPercentage=80.0
