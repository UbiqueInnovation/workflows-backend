name: Build and Push Docker Image
on:
    workflow_call:
        inputs:
            runs_on:
                required: false
                default: '["ubuntu-latest"]'
                type: string
                description: Set to '["self-hosted", "linux", "stable"]' if needed.
            checkout_lfs:
                required: false
                default: false
                type: boolean
            checkout_submodules:
                required: false
                default: false
                type: string
                description: "Whether to checkout submodules: `true` to checkout submodules or `recursive` to recursively checkout submodules."
            image_name:
                required: true
                type: string
                description: name of the image to build
            tag_name:
                required: true
                type: string
                description: name of the tag to build
            context:
                required: false
                default: "."
                type: string
                description: You can specify the path of the folder containing the Dockerfile and necessary build files
            build_args:
                required: false
                default: ""
                type: string
                description: You can specify build arguments for the Docker build
            use_semver:
                required: false
                default: true
                type: boolean
                description: Whether to automatically convert the Tag to a semver format or keep it as is in tag_name
            container_registry_type:
                required: false
                default: 'azure-cr'
                type: string
                description: "the type of container registry. Supports 'azure-cr', 'amazon-ecr', 'generic'"
            ecr_region:
                required: false
                type: string
                description: required if input container_registry_type is 'amazon-ecr'
            use_cache:
                required: false
                default: true
                type: boolean
                description: Whether to use GitHub Actions cache for Docker builds

        secrets:
            acr_registry:
                required: true
            acr_username:
                required: false
                description: required if input container_registry_type is 'azure-cr'
            acr_password:
                required: false
                description: required if input container_registry_type is 'azure-cr'
            ecr_role_to_assume:
                required: false
                description: required if input container_registry_type is 'amazon-ecr'
            repository_access_token:
                required: false
                description: Access token needed to checkout submodules

jobs:
    build:
        permissions:
            id-token: write # This is required for requesting the JWT in aws-actions/configure-aws-credentials@v4
            contents: read # This is required for requesting the JWT in aws-actions/configure-aws-credentials@v4, but only if actions/checkout is used
        name: Build Project
        runs-on: ${{ fromJson(inputs.runs_on) }}
        env:
            repository_access_token: ${{ secrets.repository_access_token }}
        steps:
            -   uses: actions/checkout@v4
                if: ${{ env.repository_access_token != '' }}
                with:
                    ref: ${{ inputs.ref_name }}
                    lfs: ${{ inputs.checkout_lfs }}
                    submodules: ${{ inputs.checkout_submodules }}
                    token: ${{ env.repository_access_token }}

            -   uses: actions/checkout@v4
                if: ${{ env.repository_access_token == '' }}
                with:
                    ref: ${{ inputs.ref_name }}
                    lfs: ${{ inputs.checkout_lfs }}
                    submodules: ${{ inputs.checkout_submodules }}

            -   name: Login to Azure CR
                if: ${{ inputs.container_registry_type == 'azure-cr' || inputs.container_registry_type == 'generic' }}
                uses: docker/login-action@v3
                with:
                    registry: ${{ secrets.acr_registry }}
                    username: ${{ secrets.acr_username }}
                    password: ${{ secrets.acr_password }}

            -   name: Configure AWS credentials
                if: ${{ inputs.container_registry_type == 'amazon-ecr' }}
                uses: aws-actions/configure-aws-credentials@v4
                with:
                    role-to-assume: ${{ secrets.ecr_role_to_assume }}
                    aws-region: ${{ inputs.ecr_region }}

            -   name: Login to Amazon ECR
                if: ${{ inputs.container_registry_type == 'amazon-ecr' }}
                uses: aws-actions/amazon-ecr-login@v2

            -   name: Set up Docker Buildx
                uses: docker/setup-buildx-action@v3

            -   name: Docker Metadata
                id: docker_meta
                uses: docker/metadata-action@v5
                with:
                    # list of Docker images to use as base name for tags
                    images: |
                        ${{ secrets.acr_registry }}/${{ inputs.image_name }}
                    # generate Docker tags based on the following events/attributes
                    tags: |
                        # set the tag from the raw git tag if inputs.use_semver is enabled
                        type=semver,pattern={{raw}},value=${{ inputs.tag_name }},enable=${{ inputs.use_semver }}
                        # raw inputs.tag_name tags iff !inputs.use_semver
                        type=raw,value=${{ inputs.tag_name }},enable=${{ ! inputs.use_semver }}
                        # set latest tag for default branch
                        type=raw,value=latest,enable={{is_default_branch}}

            -   name: Docker build and push
                uses: docker/build-push-action@v6
                with:
                    tags: ${{ steps.docker_meta.outputs.tags }}
                    labels: ${{ steps.docker_meta.outputs.labels }}
                    push: true
                    context: ${{ inputs.context }}
                    cache-from: ${{ inputs.use_cache && 'type=gha' || '' }}
                    cache-to: ${{ inputs.use_cache && 'type=gha,mode=max' || '' }}
                    build-args: ${{ inputs.build_args }}
